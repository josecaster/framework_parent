/*
 * 
 */
package software.simple.solutions.framework.core.excelexporter.configuration;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import software.simple.solutions.framework.core.excelexporter.utils.FormatUtil;
import software.simple.solutions.framework.core.excelexporter.utils.NameGenerationUtil;

/**
 * The Class ExportExcelSheetConfiguration is used to configure each sheet.
 * Several things such as report title, sheet name, component configs etc. can
 * also be configured
 *
 * @author Kartik Suba
 */
public class ExportExcelSheetConfiguration<BEANTYPE> {

	/** parent export excel configuration **/
	private ExportExcelConfiguration<BEANTYPE> exportExcelConfiguration;

	/** The is total row required. */
	private Boolean isTotalRowRequired = Boolean.FALSE;

	/** The is default sheet title required. */
	private Boolean isDefaultSheetTitleRequired = Boolean.TRUE;

	/** The is default generated by required. */
	private Boolean isDefaultGeneratedByRequired = Boolean.TRUE;

	/** The date format. */
	private String dateFormat = "EEE, dd.MM.yyyy";

	/** The report title row content. */
	private String reportTitleRowContent;

	/** The header caption start col. */
	private Integer headerCaptionStartCol = 0; // default Value

	/** The header value start col. */
	private Integer headerValueStartCol = 1; // default Value

	/** The no of columns in header. */
	private Integer noOfColumnsInHeader = 2; // default Value

	/** The no of columns to merge in add header value. */
	private Integer noOfColumnsToMergeInAddHeaderValue = 2; // default Value

	/** The no of columns in add header. */
	private Integer noOfColumnsInAddHeader = 2 * this.noOfColumnsToMergeInAddHeaderValue; // default

	/** The is header section required. */
	private Boolean isHeaderSectionRequired = Boolean.FALSE;

	/** The logger info row content. */
	private String loggerInfoRowContent;

	/** The report title. */
	private String reportTitle;

	/** The column for title region. */
	private Integer[] columnForTitleRegion = new Integer[2];

	/** The column for generated by region. */
	private Integer[] columnForGeneratedByRegion = new Integer[2];

	/** The component configs. */
	private List<ExportExcelComponentConfiguration<BEANTYPE>> componentConfigs = new ArrayList<>();

	/** The additional header info. */
	private Map<String, String> additionalHeaderInfo = new HashMap<>();

	/** The sheet name. */
	private String sheetname;

	private int frozenColumns = 0;

	private int frozenRows = 0;

	/** The report title style function. */
	private Function<XSSFWorkbook, XSSFCellStyle> reportTitleStyleFunction = workbook -> {
		XSSFCellStyle reportTitleStyle = workbook.createCellStyle();

		XSSFFont boldFont = workbook.createFont();
		boldFont.setBoldweight(Font.BOLDWEIGHT_BOLD);
		boldFont.setFontHeightInPoints((short) 14);

		reportTitleStyle.setFont(boldFont);

		return reportTitleStyle;
	};

	/** The generated by style function. */
	private Function<XSSFWorkbook, XSSFCellStyle> generatedByStyleFunction = this.reportTitleStyleFunction;

	/** The header value style. */
	private XSSFCellStyle headerValueStyle;

	/** The additional header caption style. */
	private XSSFCellStyle additionalHeaderCaptionStyle;

	/** The additional header value style. */
	private XSSFCellStyle additionalHeaderValueStyle;

	public ExportExcelConfiguration<BEANTYPE> getExportExcelConfiguration() {
		return this.exportExcelConfiguration;
	}

	public void setExportExcelConfiguration(ExportExcelConfiguration<BEANTYPE> exportExcelConfiguration) {
		this.exportExcelConfiguration = exportExcelConfiguration;
	}

	/**
	 * Gets the component configs.
	 *
	 * @return the component configs
	 */
	public List<ExportExcelComponentConfiguration<BEANTYPE>> getComponentConfigs() {
		return this.componentConfigs;
	}

	/**
	 * Sets the component configs.
	 *
	 * @param componentConfigs
	 *            the new component configs
	 */
	public void setComponentConfigs(final List<ExportExcelComponentConfiguration<BEANTYPE>> componentConfigs) {
		this.componentConfigs = componentConfigs;
	}

	/**
	 * Gets the date format.
	 *
	 * @return the date format
	 */
	public String getDateFormat() {
		return this.dateFormat;
	}

	/**
	 * Sets the date format.
	 *
	 * @param dateFormat
	 *            the new date format
	 */
	public void setDateFormat(final String dateFormat) {
		this.dateFormat = dateFormat;
	}

	/**
	 * Gets the checks if is total row required.
	 *
	 * @return the checks if is total row required
	 */
	public Boolean getIsTotalRowRequired() {
		return this.isTotalRowRequired;
	}

	/**
	 * Gets the checks if is default sheet title required.
	 *
	 * @return the checks if is default sheet title required
	 */
	public Boolean getIsDefaultSheetTitleRequired() {
		return this.isDefaultSheetTitleRequired;
	}

	/**
	 * Gets the checks if is default generated by required.
	 *
	 * @return the checks if is default generated by required
	 */
	public Boolean getIsDefaultGeneratedByRequired() {
		return this.isDefaultGeneratedByRequired;
	}

	/**
	 * Gets the report title row content.
	 *
	 * @return the report title row content
	 */
	public String getReportTitleRowContent() {
		if (this.reportTitleRowContent == null || this.reportTitleRowContent.isEmpty()) {
			return "Reportname: " + getReportTitle();
		}

		return this.reportTitleRowContent;
	}

	/**
	 * Gets the header caption start col.
	 *
	 * @return the header caption start col
	 */
	public Integer getHeaderCaptionStartCol() {
		return this.headerCaptionStartCol;
	}

	/**
	 * Gets the header value start col.
	 *
	 * @return the header value start col
	 */
	public Integer getHeaderValueStartCol() {
		return this.headerValueStartCol;
	}

	/**
	 * Gets the no of columns in header.
	 *
	 * @return the no of columns in header
	 */
	public Integer getNoOfColumnsInHeader() {
		return this.noOfColumnsInHeader;
	}

	/**
	 * Gets the no of columns to merge in add header value.
	 *
	 * @return the no of columns to merge in add header value
	 */
	public Integer getNoOfColumnsToMergeInAddHeaderValue() {
		return this.noOfColumnsToMergeInAddHeaderValue;
	}

	/**
	 * Gets the no of columns in add header.
	 *
	 * @return the no of columns in add header
	 */
	public Integer getNoOfColumnsInAddHeader() {
		return this.noOfColumnsInAddHeader;
	}

	/**
	 * Gets the checks if is header section required.
	 *
	 * @return the checks if is header section required
	 */
	public Boolean getIsHeaderSectionRequired() {
		return this.isHeaderSectionRequired;
	}

	/**
	 * Gets the logger info row content.
	 *
	 * @return the logger info row content
	 */
	public String getLoggerInfoRowContent() {
		if (this.loggerInfoRowContent == null || this.loggerInfoRowContent.isEmpty()) {
			return "Report generated by: " + getExportExcelConfiguration().getGeneratedBy() + "  on "
					+ FormatUtil.formatDate(new Date(), getDateFormat());
		}

		return this.loggerInfoRowContent;
	}

	/**
	 * Gets the report title.
	 *
	 * @return the report title
	 */
	public String getReportTitle() {
		return NameGenerationUtil.getReportTitle(this.reportTitle, getExportExcelConfiguration().getSheetConfigs()
			.indexOf(this) + 1);
	}

	/**
	 * Gets the column for title region.
	 *
	 * @return the column for title region
	 */
	public Integer[] getColumnForTitleRegion() {
		if (this.columnForTitleRegion == null || this.columnForTitleRegion[0] == null) {
			return new Integer[] { 0, 3 };
		}
		return this.columnForTitleRegion;
	}

	/**
	 * Gets the column for generated by region.
	 *
	 * @return the column for generated by region
	 */
	public Integer[] getColumnForGeneratedByRegion() {
		if (this.columnForGeneratedByRegion == null || this.columnForGeneratedByRegion[0] == null) {
			return new Integer[] { 0, 3 };
		}
		return this.columnForGeneratedByRegion;
	}

	/**
	 * Gets the additional header info.
	 *
	 * @return the additional header info
	 */
	public Map<String, String> getAdditionalHeaderInfo() {
		return this.additionalHeaderInfo;
	}

	/**
	 * Gets the sheet name.
	 *
	 * @return the sheet name
	 */
	public String getSheetname() {
		return NameGenerationUtil.getSheetname(this.sheetname, getExportExcelConfiguration().getSheetConfigs()
			.indexOf(this) + 1);
	}

	/**
	 * Gets the report title style function.
	 *
	 * @return the report title style function
	 */
	public Function<XSSFWorkbook, XSSFCellStyle> getReportTitleStyleFunction() {
		return this.reportTitleStyleFunction;
	}

	/**
	 * Gets the generated by style function.
	 *
	 * @return the generated by style function
	 */
	public Function<XSSFWorkbook, XSSFCellStyle> getGeneratedByStyleFunction() {
		return this.generatedByStyleFunction;
	}

	/**
	 * Gets the header value style.
	 *
	 * @return the header value style
	 */
	public XSSFCellStyle getHeaderValueStyle() {
		return this.headerValueStyle;
	}

	/**
	 * Gets the additional header caption style.
	 *
	 * @return the additional header caption style
	 */
	public XSSFCellStyle getAdditionalHeaderCaptionStyle() {
		return this.additionalHeaderCaptionStyle;
	}

	/**
	 * Gets the additional header value style.
	 *
	 * @return the additional header value style
	 */
	public XSSFCellStyle getAdditionalHeaderValueStyle() {
		return this.additionalHeaderValueStyle;
	}

	/**
	 * Sets the checks if is total row required.
	 *
	 * @param isTotalRowRequired
	 *            the new checks if is total row required
	 */
	public void setIsTotalRowRequired(final Boolean isTotalRowRequired) {
		this.isTotalRowRequired = isTotalRowRequired;
	}

	/**
	 * Sets the checks if is default sheet title required.
	 *
	 * @param isDefaultSheetTitleRequired
	 *            the new checks if is default sheet title required
	 */
	public void setIsDefaultSheetTitleRequired(final Boolean isDefaultSheetTitleRequired) {
		this.isDefaultSheetTitleRequired = isDefaultSheetTitleRequired;
	}

	/**
	 * Sets the checks if is default generated by required.
	 *
	 * @param isDefaultGeneratedByRequired
	 *            the new checks if is default generated by required
	 */
	public void setIsDefaultGeneratedByRequired(final Boolean isDefaultGeneratedByRequired) {
		this.isDefaultGeneratedByRequired = isDefaultGeneratedByRequired;
	}

	/**
	 * Sets the report title row content.
	 *
	 * @param reportTitleRowContent
	 *            the new report title row content
	 */
	public void setReportTitleRowContent(final String reportTitleRowContent) {
		this.reportTitleRowContent = reportTitleRowContent;
	}

	/**
	 * Sets the header caption start col.
	 *
	 * @param headerCaptionStartCol
	 *            the new header caption start col
	 */
	public void setHeaderCaptionStartCol(final Integer headerCaptionStartCol) {
		this.headerCaptionStartCol = headerCaptionStartCol;
	}

	/**
	 * Sets the header value start col.
	 *
	 * @param headerValueStartCol
	 *            the new header value start col
	 */
	public void setHeaderValueStartCol(final Integer headerValueStartCol) {
		this.headerValueStartCol = headerValueStartCol;
	}

	/**
	 * Sets the no of columns in header.
	 *
	 * @param noOfColumnsInHeader
	 *            the new no of columns in header
	 */
	public void setNoOfColumnsInHeader(final Integer noOfColumnsInHeader) {
		this.noOfColumnsInHeader = noOfColumnsInHeader;
	}

	/**
	 * Sets the no of columns to merge in add header value.
	 *
	 * @param noOfColumnsToMergeInAddHeaderValue
	 *            the new no of columns to merge in add header value
	 */
	public void setNoOfColumnsToMergeInAddHeaderValue(final Integer noOfColumnsToMergeInAddHeaderValue) {
		this.noOfColumnsToMergeInAddHeaderValue = noOfColumnsToMergeInAddHeaderValue;
	}

	/**
	 * Sets the no of columns in add header.
	 *
	 * @param noOfColumnsInAddHeader
	 *            the new no of columns in add header
	 */
	public void setNoOfColumnsInAddHeader(final Integer noOfColumnsInAddHeader) {
		this.noOfColumnsInAddHeader = noOfColumnsInAddHeader;
	}

	/**
	 * Sets the checks if is header section required.
	 *
	 * @param isHeaderSectionRequired
	 *            the new checks if is header section required
	 */
	public void setIsHeaderSectionRequired(final Boolean isHeaderSectionRequired) {
		this.isHeaderSectionRequired = isHeaderSectionRequired;
	}

	/**
	 * Sets the logger info row content.
	 *
	 * @param loggerInfoRowContent
	 *            the new logger info row content
	 */
	public void setLoggerInfoRowContent(final String loggerInfoRowContent) {
		this.loggerInfoRowContent = loggerInfoRowContent;
	}

	/**
	 * Sets the report title.
	 *
	 * @param reportTitle
	 *            the new report title
	 */
	public void setReportTitle(final String reportTitle) {
		this.reportTitle = reportTitle;
	}

	/**
	 * Sets the column for title region.
	 *
	 * @param columnForTitleRegion
	 *            the new column for title region
	 */
	public void setColumnForTitleRegion(final Integer[] columnForTitleRegion) {
		this.columnForTitleRegion = columnForTitleRegion;
	}

	/**
	 * Sets the column for generated by region.
	 *
	 * @param columnForGeneratedByRegion
	 *            the new column for generated by region
	 */
	public void setColumnForGeneratedByRegion(final Integer[] columnForGeneratedByRegion) {
		this.columnForGeneratedByRegion = columnForGeneratedByRegion;
	}

	/**
	 * Sets the additional header info.
	 *
	 * @param additionalHeaderInfo
	 *            the additional header info
	 */
	public void setAdditionalHeaderInfo(final Map<String, String> additionalHeaderInfo) {
		this.additionalHeaderInfo = additionalHeaderInfo;
	}

	/**
	 * Sets the sheet name.
	 *
	 * @param sheetname
	 *            the new sheet name
	 */
	public void setSheetName(final String sheetname) {
		this.sheetname = sheetname;
	}

	/**
	 * Sets the report title style function.
	 *
	 * @param reportTitleStyleFunction
	 *            the new report title style function
	 */
	public void setReportTitleStyleFunction(final Function<XSSFWorkbook, XSSFCellStyle> reportTitleStyleFunction) {
		this.reportTitleStyleFunction = reportTitleStyleFunction;
	}

	/**
	 * Sets the generated by style function.
	 *
	 * @param generatedByStyleFunction
	 *            the new generated by style function
	 */
	public void setGeneratedByStyleFunction(final Function<XSSFWorkbook, XSSFCellStyle> generatedByStyleFunction) {
		this.generatedByStyleFunction = generatedByStyleFunction;
	}

	/**
	 * Sets the header value style.
	 *
	 * @param headerValueStyle
	 *            the new header value style
	 */
	public void setHeaderValueStyle(final XSSFCellStyle headerValueStyle) {
		this.headerValueStyle = headerValueStyle;
	}

	/**
	 * Sets the additional header caption style.
	 *
	 * @param additionalHeaderCaptionStyle
	 *            the new additional header caption style
	 */
	public void setAdditionalHeaderCaptionStyle(final XSSFCellStyle additionalHeaderCaptionStyle) {
		this.additionalHeaderCaptionStyle = additionalHeaderCaptionStyle;
	}

	/**
	 * Sets the additional header value style.
	 *
	 * @param additionalHeaderValueStyle
	 *            the new additional header value style
	 */
	public void setAdditionalHeaderValueStyle(final XSSFCellStyle additionalHeaderValueStyle) {
		this.additionalHeaderValueStyle = additionalHeaderValueStyle;
	}

	public int getFrozenColumns() {
		return this.frozenColumns;
	}

	public void setFrozenColumns(int frozenColumns) {
		this.frozenColumns = frozenColumns;
	}

	public int getFrozenRows() {
		return this.frozenRows;
	}

	public void setFrozenRows(int frozenRows) {
		this.frozenRows = frozenRows;
	}
}
